{"version":3,"file":"eventize.js.map","sources":["../src/constants.ts","../src/utils.ts","../src/EventKeeper.ts","../src/EventListener.ts","../src/EventStore.ts","../src/isEventized.ts","../src/subscribeTo.ts","../src/injectEventizeApi.ts","../src/eventize.ts"],"sourcesContent":["export const EVENT_CATCH_EM_ALL = '*';\n\nexport const LISTENER_UNKNOWN = 0;\nexport const LISTENER_IS_FUNC = 1;\nexport const LISTENER_IS_NAMED_FUNC = 2;\nexport const LISTENER_IS_OBJ = 4;\n\nexport const PRIO_MAX = Number.POSITIVE_INFINITY;\nexport const PRIO_A = 1000000000;\nexport const PRIO_B = 1000000;\nexport const PRIO_C = 1000;\nexport const PRIO_DEFAULT = 0;\nexport const PRIO_LOW = -10000;\nexport const PRIO_MIN = Number.NEGATIVE_INFINITY;\n\nexport const NAMESPACE: symbol = (() => {\n  // @ts-ignore\n  if (!Symbol.eventize) {\n    // @ts-ignore\n    Symbol.eventize = Symbol('eventize');\n  }\n  // @ts-ignore\n  return Symbol.eventize;\n})();\n\nexport const LOG_NAMESPACE = '[eventize]';\n","/* eslint-disable no-console */\nimport {LOG_NAMESPACE, EVENT_CATCH_EM_ALL} from './constants';\nimport {EventName} from './types';\n\nexport const isCatchEmAll = (eventName: unknown): eventName is string =>\n  eventName === EVENT_CATCH_EM_ALL;\n\nexport const isEventName = (eventName: unknown): eventName is EventName => {\n  switch (typeof eventName) {\n    case 'string':\n    case 'symbol':\n      return true;\n    default:\n      return false;\n  }\n};\n\nexport const hasConsole = typeof console !== 'undefined';\n\nexport const warn = hasConsole\n  ? console[console.warn ? 'warn' : 'log'].bind(console, LOG_NAMESPACE)\n  : () => {};\n\ntype PropertyKey = string | symbol;\ntype PropertyValue = any;\n\nexport const definePublicPropertyRO = <T extends Object>(\n  obj: T,\n  name: PropertyKey,\n  value: PropertyValue,\n): T => {\n  Object.defineProperty(obj, name, {\n    value,\n    configurable: true,\n    enumerable: true,\n  });\n  return obj;\n};\n\nexport const definePublicPropertiesRO = <T extends Object>(\n  obj: T,\n  attrs: Record<PropertyKey, PropertyValue>,\n): T => {\n  const keys = Object.keys(attrs);\n  const len = keys.length;\n  for (let i = 0; i < len; i += 1) {\n    definePublicPropertyRO(obj, keys[i], attrs[keys[i]]);\n  }\n  return obj;\n};\n\nexport const defineHiddenPropertyRO = <T extends Object>(\n  obj: T,\n  name: PropertyKey,\n  value: PropertyValue,\n): T => {\n  Object.defineProperty(obj, name, {\n    value,\n    configurable: true,\n  });\n  return obj;\n};\n","import {AnyEventNames, EventArgs, EventName} from './types';\nimport {isCatchEmAll} from './utils';\n\nexport class EventKeeper {\n  events = new Map<EventName, EventArgs>();\n  eventNames = new Set<EventName>();\n\n  add(eventNames: AnyEventNames): void {\n    if (Array.isArray(eventNames)) {\n      eventNames.forEach((name) => this.eventNames.add(name));\n    } else {\n      this.eventNames.add(eventNames);\n    }\n  }\n\n  remove(eventNames: AnyEventNames): void {\n    if (Array.isArray(eventNames)) {\n      eventNames.forEach((name) => this.eventNames.delete(name));\n    } else {\n      this.eventNames.delete(eventNames);\n    }\n  }\n\n  retain(eventName: EventName, args: EventArgs): void {\n    if (this.eventNames.has(eventName)) {\n      this.events.set(eventName, args);\n    }\n  }\n\n  isKnown(eventName: EventName): boolean {\n    return this.eventNames.has(eventName);\n  }\n\n  emit(\n    eventName: EventName,\n    eventListener: {apply: (eventName: EventName, args?: EventArgs) => void},\n  ): void {\n    if (!isCatchEmAll(eventName)) {\n      const args = this.events.get(eventName);\n      if (args) {\n        eventListener.apply(eventName, args);\n      }\n    } else {\n      this.eventNames.forEach((name) => this.emit(name, eventListener));\n    }\n  }\n}\n","import {\n  EVENT_CATCH_EM_ALL,\n  LISTENER_IS_FUNC,\n  LISTENER_IS_NAMED_FUNC,\n  LISTENER_IS_OBJ,\n} from './constants';\n\nimport {EventName, EventArgs, ListenerObjectType} from './types';\nimport {isCatchEmAll, isEventName} from './utils';\n\ntype EmitFnType = Function | undefined;\ntype CallAfterApplyFnType = (() => void) | undefined;\n\nconst apply = (context: unknown, func: EmitFnType, args: EventArgs) => {\n  if (typeof func === 'function') {\n    func.apply(context, args);\n  }\n};\n\nconst emit = (\n  eventName: EventName,\n  listener: {emit: EmitFnType},\n  args: EventArgs,\n) => apply(listener, listener.emit, [eventName].concat(args));\n\nconst detectListenerType = (listener: unknown) => {\n  switch (typeof listener) {\n    case 'function':\n      return LISTENER_IS_FUNC;\n    case 'string':\n    case 'symbol':\n      return LISTENER_IS_NAMED_FUNC;\n    case 'object':\n      return LISTENER_IS_OBJ;\n  }\n};\n\nlet lastId = 0;\nconst createUniqId = () => ++lastId;\n\nexport class EventListener {\n  readonly id: number;\n  readonly eventName: EventName;\n  readonly isCatchEmAll: boolean;\n  readonly priority: number | undefined;\n  readonly listener: unknown;\n  readonly listenerObject: ListenerObjectType;\n  readonly listenerType: number;\n  callAfterApply: CallAfterApplyFnType;\n  isRemoved: boolean;\n\n  constructor(\n    eventName: EventName,\n    priority: number | undefined,\n    listener: unknown,\n    listenerObject: ListenerObjectType = null,\n  ) {\n    this.id = createUniqId();\n    this.eventName = eventName;\n    this.isCatchEmAll = isCatchEmAll(eventName);\n    this.listener = listener;\n    this.listenerObject = listenerObject;\n    this.priority = priority;\n    this.listenerType = detectListenerType(listener);\n    this.callAfterApply = undefined;\n    this.isRemoved = false;\n  }\n\n  isEqual(\n    listener: unknown,\n    listenerObject: ListenerObjectType = null,\n  ): boolean {\n    if (listener === this) return true;\n    if (typeof listener === 'number' && listener === this.id) return true;\n    if (listenerObject === null && isEventName(listener)) {\n      if (listener === EVENT_CATCH_EM_ALL) return true;\n      if (listener === this.eventName) return true;\n      return false;\n    }\n    return this.listener === listener && this.listenerObject === listenerObject;\n  }\n\n  apply(eventName: EventName, args?: EventArgs): void {\n    if (this.isRemoved) return;\n\n    const {listener, listenerObject} = this;\n\n    switch (this.listenerType) {\n      case LISTENER_IS_FUNC:\n        // @ts-ignore\n        apply(listenerObject, listener, args);\n        if (this.callAfterApply) this.callAfterApply();\n        break;\n\n      case LISTENER_IS_NAMED_FUNC:\n        // @ts-ignore\n        apply(listenerObject, listenerObject[listener], args);\n        if (this.callAfterApply) this.callAfterApply();\n        break;\n\n      case LISTENER_IS_OBJ: {\n        // @ts-ignore\n        const func = listener[eventName];\n        if (this.isCatchEmAll || this.eventName === eventName) {\n          if (typeof func === 'function') {\n            func.apply(listener, args);\n          } else {\n            // @ts-ignore\n            emit(eventName, listener, args);\n          }\n          if (this.callAfterApply) this.callAfterApply();\n        }\n        break;\n      }\n    }\n  }\n}\n","import {EventListener} from './EventListener';\nimport {EVENT_CATCH_EM_ALL} from './constants';\nimport {EventName, ListenerObjectType} from './types';\nimport {isCatchEmAll, isEventName} from './utils';\n\ntype HasPriorityOrIdType = {priority: number; id: number};\n\nconst sortByPrioAndId = (\n  a: HasPriorityOrIdType,\n  b: HasPriorityOrIdType,\n): number =>\n  a.priority !== b.priority ? b.priority - a.priority : a.id - b.id;\n\nconst cloneArray = <T>(arr: Array<T>): Array<T> => arr?.slice(0);\n\nconst removeListenerItem = (arr: Array<any>, listener: any) => {\n  const idx = arr.indexOf(listener);\n  if (idx > -1) {\n    arr.splice(idx, 1);\n  }\n};\n\nconst removeListener = (\n  listeners: Array<EventListener>,\n  listener: unknown,\n  listenerObject: ListenerObjectType,\n) => {\n  const idx = listeners.findIndex((item) =>\n    item.isEqual(listener, listenerObject),\n  );\n  if (idx > -1) {\n    listeners[idx].isRemoved = true;\n    listeners.splice(idx, 1);\n  }\n};\n\nconst removeAllListeners = (listeners: Array<EventListener>) => {\n  if (listeners) {\n    listeners.forEach((li) => {\n      li.isRemoved = true;\n    });\n    listeners.length = 0;\n  }\n};\n\nexport class EventStore {\n  readonly namedListeners: Map<EventName, Array<EventListener>>;\n  readonly catchEmAllListeners: Array<EventListener>;\n\n  constructor() {\n    this.namedListeners = new Map();\n    this.catchEmAllListeners = [];\n  }\n\n  add(eventListener: EventListener): void {\n    if (eventListener.isCatchEmAll) {\n      this.catchEmAllListeners.push(eventListener);\n      this.catchEmAllListeners.sort(sortByPrioAndId);\n    } else {\n      const {eventName} = eventListener;\n      let namedListeners = this.namedListeners.get(eventName);\n      if (!namedListeners) {\n        namedListeners = [];\n        this.namedListeners.set(eventName, namedListeners);\n      }\n      namedListeners.push(eventListener);\n      namedListeners.sort(sortByPrioAndId);\n    }\n  }\n\n  remove(listener: unknown, listenerObject: ListenerObjectType): void {\n    if (listenerObject == null && Array.isArray(listener)) {\n      listener.forEach(this.remove.bind(this));\n    } else if (\n      listener == null ||\n      (listenerObject == null && isCatchEmAll(listener))\n    ) {\n      this.removeAllListeners();\n    } else if (listenerObject == null && isEventName(listener)) {\n      const listeners = this.namedListeners.get(listener);\n      removeAllListeners(listeners);\n    } else if (listener instanceof EventListener) {\n      listener.isRemoved = true;\n      this.namedListeners.forEach((namedListeners) =>\n        removeListenerItem(namedListeners, listener),\n      );\n      removeListenerItem(this.catchEmAllListeners, listener);\n    } else {\n      this.namedListeners.forEach((namedListeners) =>\n        removeListener(namedListeners, listener, listenerObject),\n      );\n      removeListener(this.catchEmAllListeners, listener, listenerObject);\n    }\n  }\n\n  removeAllListeners(): void {\n    this.namedListeners.forEach((namedListeners) =>\n      removeAllListeners(namedListeners),\n    );\n    this.namedListeners.clear();\n    removeAllListeners(this.catchEmAllListeners);\n  }\n\n  forEach(eventName: EventName, fn: (listener: EventListener) => void): void {\n    const catchEmAllListeners = cloneArray(this.catchEmAllListeners);\n    const namedListeners = cloneArray(this.namedListeners.get(eventName));\n    if (\n      eventName === EVENT_CATCH_EM_ALL ||\n      !namedListeners ||\n      namedListeners.length === 0\n    ) {\n      catchEmAllListeners.forEach(fn);\n    } else if (catchEmAllListeners.length === 0) {\n      namedListeners.forEach(fn);\n    } else {\n      const iLen = namedListeners.length;\n      const jLen = catchEmAllListeners.length;\n      let i = 0;\n      let j = 0;\n      while (i < iLen || j < jLen) {\n        if (i < iLen) {\n          const cur = namedListeners[i];\n          if (j >= jLen || cur.priority >= catchEmAllListeners[j].priority) {\n            fn(cur);\n            ++i;\n            continue;\n          }\n        }\n        if (j < jLen) {\n          fn(catchEmAllListeners[j]);\n          ++j;\n        }\n      }\n    }\n  }\n}\n","import {NAMESPACE} from './constants';\nimport {EventizeApi} from './types';\n\nexport const isEventized = <T extends Object>(obj: T): obj is T & EventizeApi =>\n  !!(\n    obj &&\n    // @ts-ignore\n    obj[NAMESPACE]\n  );\n\nexport type EventizeGuard = typeof isEventized;\n","import {EventKeeper} from './EventKeeper';\nimport {EventListener} from './EventListener';\nimport {EventStore} from './EventStore';\nimport {EVENT_CATCH_EM_ALL, PRIO_DEFAULT} from './constants';\nimport {EventArgs, EventName, ListenerObjectType} from './types';\nimport {hasConsole, isEventName, warn} from './utils';\n\nconst registerEventListener = (\n  store: EventStore,\n  keeper: EventKeeper,\n  eventName: EventName,\n  priority: number,\n  listener: unknown,\n  listenerObject: ListenerObjectType,\n): EventListener => {\n  const eventListener = new EventListener(\n    eventName,\n    priority,\n    listener,\n    listenerObject,\n  );\n  store.add(eventListener);\n  keeper.emit(eventName, eventListener);\n  return eventListener;\n};\n\nexport const subscribeTo = (\n  store: EventStore,\n  keeper: EventKeeper,\n  args: EventArgs,\n): EventListener | Array<EventListener> => {\n  const len = args.length;\n  const typeOfFirstArg = typeof args[0];\n\n  let eventName: EventName;\n  let priority: number;\n  let listener: unknown;\n  let listenerObject: ListenerObjectType;\n\n  if (len >= 2 && len <= 3 && typeOfFirstArg === 'number') {\n    eventName = EVENT_CATCH_EM_ALL;\n    [priority, listener, listenerObject] = args;\n  } else if (len >= 3 && len <= 4 && typeof args[1] === 'number') {\n    [eventName, priority, listener, listenerObject] = args;\n  } else {\n    priority = PRIO_DEFAULT;\n    if (isEventName(typeOfFirstArg) || Array.isArray(args[0])) {\n      [eventName, listener, listenerObject] = args;\n    } else {\n      eventName = EVENT_CATCH_EM_ALL;\n      [listener, listenerObject] = args;\n    }\n  }\n\n  if (!listener && hasConsole) {\n    warn('called with insufficient arguments!', args);\n    throw 'subscribeTo called with insufficient arguments!';\n  }\n\n  const register = (prio: number) => (event: EventName) =>\n    registerEventListener(store, keeper, event, prio, listener, listenerObject);\n\n  if (Array.isArray(eventName)) {\n    return eventName.map((name) => {\n      if (Array.isArray(name)) {\n        return register(name[1])(name[0]);\n      }\n      return register(priority)(name);\n    });\n  }\n  return register(priority)(eventName);\n};\n","import {EventKeeper} from './EventKeeper';\nimport {EventListener} from './EventListener';\nimport {EventStore} from './EventStore';\nimport {EVENT_CATCH_EM_ALL, NAMESPACE} from './constants';\nimport {isEventized} from './isEventized';\nimport {subscribeTo} from './subscribeTo';\nimport {\n  AnyEventNames,\n  EventArgs,\n  EventizeApi,\n  EventName,\n  ListenerType,\n  ListenerObjectType,\n  SubscribeArgs,\n  UnsubscribeFunc,\n} from './types';\nimport {defineHiddenPropertyRO, isEventName} from './utils';\n\nconst unsubscribeAfterApply = (obj: EventizeApi) => (\n  listener: EventListener,\n) => {\n  listener.callAfterApply = () => obj.off(listener);\n};\n\nconst makeUnsubscribe = (\n  host: EventizeApi,\n  listeners: EventListener | Array<EventListener>,\n): UnsubscribeFunc => {\n  const unsubscribe = () => host.off(listeners);\n  return Object.assign(\n    unsubscribe,\n    Array.isArray(listeners) ? {listeners} : {listener: listeners},\n  ) as UnsubscribeFunc;\n};\n\nexport function injectEventizeApi<T extends Object>(obj: T): T & EventizeApi {\n  if (isEventized(obj)) {\n    // it already has the interface - no need to inject it again\n    return obj;\n  }\n\n  const store = new EventStore();\n  const keeper = new EventKeeper();\n\n  defineHiddenPropertyRO(obj, NAMESPACE, {keeper, store});\n\n  const eventizedObj = Object.assign(obj, {\n    on(...args: SubscribeArgs): UnsubscribeFunc {\n      return makeUnsubscribe(eventizedObj, subscribeTo(store, keeper, args));\n    },\n\n    once(...args: SubscribeArgs): UnsubscribeFunc {\n      const listeners = subscribeTo(store, keeper, args);\n      if (Array.isArray(listeners)) {\n        listeners.forEach(unsubscribeAfterApply(eventizedObj));\n      } else {\n        unsubscribeAfterApply(eventizedObj)(listeners);\n      }\n      return makeUnsubscribe(eventizedObj, listeners);\n    },\n\n    off(listener: ListenerType, listenerObject?: ListenerObjectType): void {\n      store.remove(listener, listenerObject);\n      if (Array.isArray(listener)) {\n        keeper.remove(listener.filter((li) => typeof li === 'string'));\n      } else if (isEventName(listener)) {\n        keeper.remove(listener);\n      }\n    },\n\n    emit(eventNames: AnyEventNames, ...args: EventArgs): void {\n      if (Array.isArray(eventNames)) {\n        eventNames.forEach((event) => {\n          store.forEach(event, (listener) => listener.apply(event, args));\n          keeper.retain(event, args);\n        });\n      } else if (eventNames !== EVENT_CATCH_EM_ALL) {\n        store.forEach(eventNames, (listener) =>\n          listener.apply(eventNames, args),\n        );\n        keeper.retain(eventNames, args);\n      }\n    },\n\n    retain(eventName: EventName): void {\n      keeper.add(eventName);\n    },\n  });\n\n  return eventizedObj;\n}\n","import {\n  EVENT_CATCH_EM_ALL,\n  PRIO_A,\n  PRIO_B,\n  PRIO_C,\n  PRIO_DEFAULT,\n  PRIO_LOW,\n  PRIO_MAX,\n  PRIO_MIN,\n} from './constants';\nimport {injectEventizeApi} from './injectEventizeApi';\nimport {isEventized, EventizeGuard} from './isEventized';\nimport {EventizeApi} from './types';\n\nfunction eventize<T extends Object>(obj: T): T & EventizeApi {\n  return injectEventizeApi(obj);\n}\n\neventize.inject = injectEventizeApi;\n\neventize.extend = <T extends Object>(obj: T): T & EventizeApi =>\n  injectEventizeApi(Object.create(obj));\n\neventize.create = (obj: Object): EventizeApi => {\n  const eventizer = injectEventizeApi({});\n  eventizer.on(EVENT_CATCH_EM_ALL, PRIO_DEFAULT, obj);\n  return eventizer;\n};\n\neventize.is = isEventized;\n\nObject.assign(eventize, {\n  PRIO_MAX,\n  PRIO_A,\n  PRIO_B,\n  PRIO_C,\n  PRIO_DEFAULT,\n  PRIO_LOW,\n  PRIO_MIN,\n});\n\nexport interface EventizerFunc {\n  <T extends Object>(obj: T): T & EventizeApi;\n}\n\nexport interface EventizeFuncApi extends EventizerFunc {\n  inject: EventizerFunc;\n  extend: EventizerFunc;\n  create(obj: Object): EventizeApi;\n\n  is: EventizeGuard;\n\n  PRIO_MAX: number;\n  PRIO_A: number;\n  PRIO_B: number;\n  PRIO_C: number;\n  PRIO_DEFAULT: number;\n  PRIO_LOW: number;\n  PRIO_MIN: number;\n}\n\nexport default eventize as EventizeFuncApi;\n\nexport interface Eventize extends EventizeApi {}\n\nexport class Eventize {\n  constructor() {\n    eventize(this);\n  }\n}\n"],"names":[],"mappings":"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"}