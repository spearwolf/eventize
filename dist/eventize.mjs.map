{"version":3,"file":"eventize.mjs.map","sources":["../src/constants.js","../src/EventListener.js","../src/EventStore.js","../src/EventKeeper.js","../src/logUtils.js","../src/subscribeTo.js","../src/inject.js","../src/propUtils.js","../src/eventize.js"],"sourcesContent":["export const EVENT_CATCH_EM_ALL = '*';\n\nexport const LISTENER_UNKNOWN       = 0;\nexport const LISTENER_IS_FUNC       = 1;\nexport const LISTENER_IS_NAMED_FUNC = 2;\nexport const LISTENER_IS_OBJ        = 4;\n\nexport const PRIO_MAX     = Number.POSITIVE_INFINITY;\nexport const PRIO_A       = 1000000000;\nexport const PRIO_B       = 1000000;\nexport const PRIO_C       = 1000;\nexport const PRIO_DEFAULT = 0;\nexport const PRIO_LOW     = -10000;\nexport const PRIO_MIN     = Number.NEGATIVE_INFINITY;\n\nexport const NAMESPACE = (() => {\n  if (!Symbol.eventize) {\n    Symbol.eventize = Symbol('eventize');\n  }\n  return Symbol.eventize;\n})();\n\nexport const LOG_NAMESPACE = '[eventize]';\n","import {\n  EVENT_CATCH_EM_ALL,\n  LISTENER_IS_FUNC,\n  LISTENER_IS_NAMED_FUNC,\n  LISTENER_IS_OBJ,\n} from './constants';\n\nconst apply = (context, func, args) => {\n  if (typeof func === 'function') {\n    func.apply(context, args);\n  }\n};\n\nconst emit = (eventName, listener, args) => apply(\n  listener,\n  listener.emit,\n  [eventName].concat(args),\n);\n\nconst detectListenerType = (listener) => {\n  switch (typeof listener) {\n    case 'function':\n      return LISTENER_IS_FUNC;\n    case 'string':\n      return LISTENER_IS_NAMED_FUNC;\n    case 'object':\n      return LISTENER_IS_OBJ;\n  }\n};\n\nlet lastId = 0;\nconst createUniqId = () => ++lastId;\n\nexport default class EventListener {\n  constructor(eventName, priority, listener, listenerObject = null) {\n    this.id = createUniqId();\n    this.eventName = eventName;\n    this.isCatchEmAll = eventName === EVENT_CATCH_EM_ALL;\n    this.listener = listener;\n    this.listenerObject = listenerObject;\n    this.priority = priority;\n    this.listenerType = detectListenerType(listener);\n    this.callAfterApply = undefined;\n    this.isRemoved = false;\n  }\n\n  isEqual(listener, listenerObject = null) {\n    if (listener === this) return true;\n    if (typeof listener === 'number' && listener === this.id) return true;\n    if (listenerObject === null && typeof listener === 'string') {\n      if (listener === EVENT_CATCH_EM_ALL) return true;\n      if (listener === this.eventName) return true;\n      return false;\n    }\n    return this.listener === listener && this.listenerObject === listenerObject;\n  }\n\n  apply(eventName, args) {\n    if (this.isRemoved) return;\n\n    const { listener, listenerObject } = this;\n\n    switch (this.listenerType) {\n      case LISTENER_IS_FUNC:\n        apply(listenerObject, listener, args);\n        if (this.callAfterApply) this.callAfterApply();\n        break;\n\n      case LISTENER_IS_NAMED_FUNC:\n        apply(listenerObject, listenerObject[listener], args);\n        if (this.callAfterApply) this.callAfterApply();\n        break;\n\n      case LISTENER_IS_OBJ: {\n        const func = listener[eventName];\n        if (this.isCatchEmAll || this.eventName === eventName) {\n          if (typeof func === 'function') {\n            func.apply(listener, args);\n          } else {\n            emit(eventName, listener, args);\n          }\n          if (this.callAfterApply) this.callAfterApply();\n        }\n        break;\n      }\n    }\n  }\n}\n","import { EVENT_CATCH_EM_ALL } from './constants';\nimport EventListener from './EventListener';\n\nconst sortByPrioAndId = (a, b) => (a.priority !== b.priority ? b.priority - a.priority : a.id - b.id);\n\nconst cloneArray = (arr) => {\n  if (arr) {\n    return arr.slice(0);\n  }\n};\n\nconst removeListenerItem = (arr, listener) => {\n  const idx = arr.indexOf(listener);\n  if (idx > -1) {\n    arr.splice(idx, 1);\n  }\n};\n\nconst removeListener = (listeners, listener, listenerObject) => {\n  const idx = listeners.findIndex((item) => item.isEqual(listener, listenerObject));\n  if (idx > -1) {\n    listeners[idx].isRemoved = true;\n    listeners.splice(idx, 1);\n  }\n};\n\nconst removeAllListeners = (listeners) => {\n  if (listeners) {\n    listeners.forEach((li) => {\n      li.isRemoved = true;\n    });\n    listeners.length = 0;\n  }\n};\n\nexport default class EventStore {\n  constructor() {\n    this.namedListeners = new Map();\n    this.catchEmAllListeners = [];\n  }\n\n  add(eventListener) {\n    if (eventListener.isCatchEmAll) {\n      this.catchEmAllListeners.push(eventListener);\n      this.catchEmAllListeners.sort(sortByPrioAndId);\n    } else {\n      const { eventName } = eventListener;\n      let namedListeners = this.namedListeners.get(eventName);\n      if (!namedListeners) {\n        namedListeners = [];\n        this.namedListeners.set(eventName, namedListeners);\n      }\n      namedListeners.push(eventListener);\n      namedListeners.sort(sortByPrioAndId);\n    }\n  }\n\n  remove(listener, listenerObject) {\n    if (listenerObject == null && Array.isArray(listener)) {\n      listener.forEach(this.remove.bind(this));\n    } else if (listener == null || (listenerObject == null && listener === EVENT_CATCH_EM_ALL)) {\n      this.removeAllListeners();\n    } else if (listenerObject == null && typeof listener === 'string') {\n      const listeners = this.namedListeners.get(listener);\n      removeAllListeners(listeners);\n    } else if (listener instanceof EventListener) {\n      listener.isRemoved = true;\n      this.namedListeners.forEach((namedListeners) => removeListenerItem(namedListeners, listener));\n      removeListenerItem(this.catchEmAllListeners, listener);\n    } else {\n      this.namedListeners.forEach((namedListeners) => removeListener(namedListeners, listener, listenerObject));\n      removeListener(this.catchEmAllListeners, listener, listenerObject);\n    }\n  }\n\n  removeAllListeners() {\n    this.namedListeners.forEach((namedListeners) => removeAllListeners(namedListeners));\n    this.namedListeners.clear();\n    removeAllListeners(this.catchEmAllListeners);\n  }\n\n  forEach(eventName, fn) {\n    const catchEmAllListeners = cloneArray(this.catchEmAllListeners);\n    const namedListeners = cloneArray(this.namedListeners.get(eventName));\n    if (eventName === EVENT_CATCH_EM_ALL || !namedListeners || namedListeners.length === 0) {\n      catchEmAllListeners.forEach(fn);\n    } else if (catchEmAllListeners.length === 0) {\n      namedListeners.forEach(fn);\n    } else {\n      const iLen = namedListeners.length;\n      const jLen = catchEmAllListeners.length;\n      let i = 0;\n      let j = 0;\n      while (i < iLen || j < jLen) {\n        if (i < iLen) {\n          const cur = namedListeners[i];\n          if (j >= jLen || cur.priority >= catchEmAllListeners[j].priority) {\n            fn(cur);\n            ++i;\n            continue;\n          }\n        }\n        if (j < jLen) {\n          fn(catchEmAllListeners[j]);\n          ++j;\n        }\n      }\n    }\n  }\n}\n","import { EVENT_CATCH_EM_ALL } from './constants';\n\nexport default class EventKeeper {\n  constructor() {\n    this.events = new Map();\n    this.eventNames = new Set();\n  }\n\n  add(eventName) {\n    if (Array.isArray(eventName)) {\n      eventName.forEach((name) => this.eventNames.add(name));\n    } else {\n      this.eventNames.add(eventName);\n    }\n  }\n\n  remove(eventName) {\n    if (Array.isArray(eventName)) {\n      eventName.forEach((name) => this.remove(name));\n    } else {\n      this.eventNames.delete(eventName);\n    }\n  }\n\n  retain(eventName, args) {\n    if (this.eventNames.has(eventName)) {\n      this.events.set(eventName, args);\n    }\n  }\n\n  isKnown(eventName) {\n    return this.eventNames.has(eventName);\n  }\n\n  emit(eventName, eventListener) {\n    if (eventName === EVENT_CATCH_EM_ALL) {\n      this.eventNames.forEach((name) => this.emit(name, eventListener));\n    } else {\n      const args = this.events.get(eventName);\n      if (args) {\n        eventListener.apply(eventName, args);\n      }\n    }\n  }\n}\n","\nimport { LOG_NAMESPACE } from './constants';\n\nexport const hasConsole = typeof console !== 'undefined';\n\nexport const warn = hasConsole ? console[console.warn ? 'warn' : 'log'].bind(console, LOG_NAMESPACE) : () => undefined; // eslint-disable-line\n","import EventListener from './EventListener';\n\nimport { hasConsole, warn } from './logUtils';\n\nimport {\n  EVENT_CATCH_EM_ALL,\n  PRIO_DEFAULT,\n} from './constants';\n\nconst registerEventListener = (store, keeper, eventName, priority, listener, listenerObject) => {\n  const eventListener = new EventListener(eventName, priority, listener, listenerObject);\n  store.add(eventListener);\n  keeper.emit(eventName, eventListener);\n  return eventListener;\n};\n\nconst subscribeTo = (store, keeper, args) => {\n  const len = args.length;\n  const typeOfFirstArg = typeof args[0];\n\n  let eventName;\n  let priority;\n  let listener;\n  let listenerObject;\n\n  if (len >= 2 && len <= 3 && typeOfFirstArg === 'number') {\n    eventName = EVENT_CATCH_EM_ALL;\n    [priority, listener, listenerObject] = args;\n  } else if (len >= 3 && len <= 4 && typeof args[1] === 'number') {\n    [eventName, priority, listener, listenerObject] = args;\n  } else {\n    priority = PRIO_DEFAULT;\n    if (typeOfFirstArg === 'string' || Array.isArray(args[0])) {\n      [eventName, listener, listenerObject] = args;\n    } else {\n      eventName = EVENT_CATCH_EM_ALL;\n      [listener, listenerObject] = args;\n    }\n  }\n\n  if (!listener && hasConsole) {\n    warn('called with insufficient arguments!', args);\n    return;\n  }\n\n  const register = (prio) => (event) => registerEventListener(\n    store, keeper, event,\n    prio, listener, listenerObject,\n  );\n\n  if (Array.isArray(eventName)) {\n    return eventName.map((name) => {\n      if (Array.isArray(name)) {\n        return register(name[1])(name[0]);\n      }\n      return register(priority)(name);\n    });\n  }\n  return register(priority)(eventName);\n};\n\nexport default subscribeTo;\n","import EventStore from './EventStore';\nimport EventKeeper from './EventKeeper';\nimport { defineHiddenPropertyRO } from './propUtils';\nimport subscribeTo from './subscribeTo';\n\nimport {\n  EVENT_CATCH_EM_ALL,\n  NAMESPACE,\n} from './constants';\n\nconst removeListener = (obj) => (listener) => {\n  listener.callAfterApply = () => obj.off(listener);\n};\n\nconst makeUnsubscribe = (host, listeners) => {\n  const unsubscribe = () => host.off(listeners);\n  Object.defineProperties(unsubscribe, Array.isArray(listeners) ? {\n    listeners: {\n      get: () => listeners,\n    },\n  } : {\n    listener: {\n      get: () => listeners,\n    },\n  });\n  return unsubscribe;\n};\n\nexport default function injectEventizeApi(obj) {\n  if (obj[NAMESPACE]) return obj;\n\n  const store = new EventStore();\n  const keeper = new EventKeeper();\n  defineHiddenPropertyRO(obj, NAMESPACE, { keeper, store });\n\n  Object.assign(obj, {\n    // ----------------------------------------------------------------------------------------\n    //\n    // .on( eventName*, [ priority, ] listenerFunc [, listenerObject] )\n    // .on( eventName*, [ priority, ] listenerFuncName, listenerObject )\n    // .on( eventName*, [ priority, ] listenerObject )\n    //\n    // .on( [ priority, ] listenerFunc [, listenerObject] )\n    //                                            => listenerObject.on( '*', listenerFunc )\n    // .on( [ priority, ] listenerObject )\n    //                                            => listenerObject.on( '*', listenerObject )\n    //\n    // .off(...)\n    //\n    // eventName*: eventName | Array<eventName>\n    // eventName: string\n    //\n    // listenerFunc: function\n    // listenerFuncName: string\n    // listenerObject: object\n    //\n    // ----------------------------------------------------------------------------------------\n    on(...args) {\n      return makeUnsubscribe(obj, subscribeTo(store, keeper, args));\n    },\n    once(...args) {\n      const listeners = subscribeTo(store, keeper, args);\n      if (Array.isArray(listeners)) {\n        listeners.forEach(removeListener(obj));\n      } else {\n        removeListener(obj)(listeners);\n      }\n      return makeUnsubscribe(obj, listeners);\n    },\n    off(listener, listenerObject) {\n      store.remove(listener, listenerObject);\n      if (Array.isArray(listener)) {\n        keeper.remove(listener.filter((li) => typeof li === 'string'));\n      } else if (typeof listener === 'string') {\n        keeper.remove(listener);\n      }\n    },\n    emit(eventName, ...args) {\n      if (Array.isArray(eventName)) {\n        eventName.forEach((event) => {\n          store.forEach(event, (listener) => listener.apply(event, args));\n          keeper.retain(event, args);\n        });\n      } else if (eventName !== EVENT_CATCH_EM_ALL) {\n        store.forEach(eventName, (listener) => listener.apply(eventName, args));\n        keeper.retain(eventName, args);\n      }\n    },\n    retain(eventName) {\n      keeper.add(eventName);\n    },\n  });\n  return obj;\n}\n","\nexport const definePublicPropertyRO = (obj, name, value) => {\n  Object.defineProperty(obj, name, {\n    value,\n    configurable: true,\n    enumerable: true,\n  });\n  return obj;\n};\n\nexport const definePublicPropertiesRO = (obj, attrs) => {\n  const keys = Object.keys(attrs);\n  const len = keys.length;\n  for (let i = 0; i < len; i += 1) {\n    definePublicPropertyRO(obj, keys[i], attrs[keys[i]]);\n  }\n  return obj;\n};\n\nexport const defineHiddenPropertyRO = (obj, name, value) => {\n  Object.defineProperty(obj, name, {\n    value,\n    configurable: true,\n  });\n  return obj;\n};\n","import injectEventizeApi from './inject';\n\nimport {\n  EVENT_CATCH_EM_ALL,\n  NAMESPACE,\n  PRIO_A,\n  PRIO_B,\n  PRIO_C,\n  PRIO_DEFAULT,\n  PRIO_LOW,\n  PRIO_MAX,\n  PRIO_MIN,\n} from './constants';\n\nfunction eventize(obj) {\n  return injectEventizeApi(obj);\n}\n\neventize.inject = injectEventizeApi;\n\neventize.extend = (obj) => injectEventizeApi(Object.create(obj));\n\neventize.create = (obj) => {\n  const eventizer = injectEventizeApi({});\n  eventizer.on(EVENT_CATCH_EM_ALL, PRIO_DEFAULT, obj);\n  return eventizer;\n};\n\neventize.is = (obj) => !!(obj && obj[NAMESPACE]);\n\nexport class Eventize {\n  constructor() {\n    eventize(this);\n  }\n}\n\nObject.assign(eventize, {\n  PRIO_MAX,\n  PRIO_A,\n  PRIO_B,\n  PRIO_C,\n  PRIO_DEFAULT,\n  PRIO_LOW,\n  PRIO_MIN,\n});\n\nexport {\n  EVENT_CATCH_EM_ALL,\n  NAMESPACE,\n  PRIO_MAX,\n  PRIO_A,\n  PRIO_B,\n  PRIO_C,\n  PRIO_DEFAULT,\n  PRIO_LOW,\n  PRIO_MIN,\n};\n\nexport default eventize;\n"],"names":["EVENT_CATCH_EM_ALL","PRIO_MAX","Number","POSITIVE_INFINITY","PRIO_A","PRIO_B","PRIO_C","PRIO_DEFAULT","PRIO_LOW","PRIO_MIN","NEGATIVE_INFINITY","NAMESPACE","Symbol","eventize","apply","context","func","args","lastId","EventListener","constructor","eventName","priority","listener","listenerObject","id","isCatchEmAll","listenerType","detectListenerType","callAfterApply","undefined","isRemoved","isEqual","this","emit","concat","sortByPrioAndId","a","b","cloneArray","arr","slice","removeListenerItem","idx","indexOf","splice","removeListener","listeners","findIndex","item","removeAllListeners","forEach","li","length","EventStore","namedListeners","Map","catchEmAllListeners","add","eventListener","push","sort","get","set","remove","Array","isArray","bind","clear","fn","iLen","jLen","i","j","cur","EventKeeper","events","eventNames","Set","name","delete","retain","has","isKnown","hasConsole","console","warn","subscribeTo","store","keeper","len","typeOfFirstArg","register","prio","event","registerEventListener","map","obj","off","makeUnsubscribe","host","unsubscribe","Object","defineProperties","injectEventizeApi","value","defineProperty","configurable","defineHiddenPropertyRO","assign","on","once","filter","inject","extend","create","eventizer","is"],"mappings":"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"}